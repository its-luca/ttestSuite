package main

import (
	"testing"
	"ttestSuite/mocks"
	"ttestSuite/testUtils"
)

func Test_computeCorrelation(t *testing.T) {
	pwMeansTotal := []float64{0.489252638400019, 0.337719409821377, 0.900053846417662, 0.369246781120215, 0.111202755293787, 0.780252068321138, 0.389738836961253, 0.241691285913833, 0.403912145588115, 0.0964545251683886, 0.131973292606335, 0.942050590775485, 0.956134540229802, 0.575208595078466, 0.0597795429471558, 0.234779913372406, 0.353158571222071, 0.821194040197959, 0.0154034376515551, 0.0430238016578078, 0.168990029462704, 0.649115474956452, 0.731722385658670, 0.647745963136307, 0.450923706430945, 0.547008892286345, 0.296320805607773, 0.744692807074156, 0.188955015032545, 0.686775433365315, 0.183511155737270, 0.368484596490337, 0.625618560729690, 0.780227435151377, 0.0811257688657853, 0.929385970968730, 0.775712678608402, 0.486791632403172, 0.435858588580919, 0.446783749429806, 0.306349472016557, 0.508508655381127, 0.510771564172110, 0.817627708322262, 0.794831416883453, 0.644318130193692, 0.378609382660268, 0.811580458282477, 0.532825588799455, 0.350727103576883}
	singleTrace := []float64{0.939001561999887, 0.875942811492984, 0.550156342898422, 0.622475086001228, 0.587044704531417, 0.207742292733028, 0.301246330279491, 0.470923348517591, 0.230488160211559, 0.844308792695389, 0.194764289567049, 0.225921780972399, 0.170708047147859, 0.227664297816554, 0.435698684103899, 0.311102286650413, 0.923379642103244, 0.430207391329584, 0.184816320124136, 0.904880968679893, 0.979748378356085, 0.438869973126103, 0.111119223440599, 0.258064695912067, 0.408719846112552, 0.594896074008614, 0.262211747780845, 0.602843089382083, 0.711215780433683, 0.221746734017240, 0.117417650855806, 0.296675873218327, 0.318778301925882, 0.424166759713807, 0.507858284661118, 0.0855157970900440, 0.262482234698333, 0.801014622769739, 0.0292202775621463, 0.928854139478045, 0.730330862855453, 0.488608973803579, 0.578525061023439, 0.237283579771521, 0.458848828179931, 0.963088539286913, 0.546805718738968, 0.521135830804002, 0.231594386708524, 0.488897743920167}

	if len(pwMeansTotal) != len(singleTrace) {
		t.Fatalf("test data does not have same length")
	}

	const wantCorrForFirst100 = 0.6904
	const wantCorrForSecond100 = 1.0
	const traceCount = 200
	s := &partialTTestState{
		pwMeanFixed:  pwMeansTotal,
		pwMeanRandom: nil,
		countFixed:   traceCount,
		countRandom:  0,
	}

	firstBlock := make([][]float64, 100)
	secondBlock := make([][]float64, 100)
	for i := 0; i < 100; i++ {
		firstBlock[i] = singleTrace
		secondBlock[i] = pwMeansTotal
	}
	//all entries are fixed case
	caseDataPerBlock := [][]int{make([]int, 100), make([]int, 100)}

	blocksAsFloat := [][][]float64{firstBlock, secondBlock}

	traceReader, traceParser, err := mocks.CreateFloatSourceParserPair(blocksAsFloat, caseDataPerBlock, -1)
	if err != nil {
		t.Fatalf("failed to setup reader and parser for test : %v", err)
	}

	normCorr, err := computeCorrelation(traceReader, traceParser, 2, s)
	if err != nil {
		t.Fatalf("Unexpected error : %v", err)
	}
	for i := 0; i < 100; i++ {
		if !testUtils.FloatEqUpTo(normCorr[i], wantCorrForFirst100, 0.001) {
			t.Errorf("entry %v: want %v got %v", i, wantCorrForFirst100, normCorr[i])
		}
	}
	for i := 100; i < 200; i++ {
		if !testUtils.FloatEqUpTo(normCorr[i], wantCorrForSecond100, 0.001) {
			t.Errorf("entry %v: want %v got %v", i, wantCorrForFirst100, normCorr[i])
		}
	}
}
